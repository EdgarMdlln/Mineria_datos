{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/EdgarMdlln/Mineria_datos/blob/main/2doParcial_EMM_1555408_EAG43_abr2023\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "1e47a82f",
      "metadata": {
        "id": "1e47a82f"
      },
      "source": [
        "## Segundo Examen Parcial  de Estadística Aplicada\n",
        "Enero-Junio 2023"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "59bcec6c",
      "metadata": {
        "id": "59bcec6c"
      },
      "source": [
        "**Nombre:** Edgar Medellín Martínez\n",
        "\n",
        "**Matricula:** 1555408"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "5ca207b0",
      "metadata": {
        "id": "5ca207b0"
      },
      "source": [
        "**Instrucciones:** En cada punto importa las librerias que consideres necesarias"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9ac91083",
      "metadata": {
        "id": "9ac91083"
      },
      "outputs": [],
      "source": [
        "# Importa las librerias de numpy, python y matplotlib\n",
        "import numpy as np\n",
        "import pandas as pd # ¿sera pandas en lugar de python?\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "105e51dc",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "105e51dc",
        "outputId": "5cec7eaf-7847-408e-d368-e7e719942a90"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    checking_account_status  duration        credit_history  \\\n",
              "0                   below_0         6      critical_account   \n",
              "1                  0_to_200        48  existing_credit_paid   \n",
              "2                no_account        12      critical_account   \n",
              "3                   below_0        42  existing_credit_paid   \n",
              "4                   below_0        24       delay_in_paying   \n",
              "..                      ...       ...                   ...   \n",
              "995              no_account        12  existing_credit_paid   \n",
              "996                 below_0        30  existing_credit_paid   \n",
              "997              no_account        12  existing_credit_paid   \n",
              "998                 below_0        45  existing_credit_paid   \n",
              "999                0_to_200        45      critical_account   \n",
              "\n",
              "                 purpose  amount savings_account_status employment_years  \\\n",
              "0               radio_TV    1169                unknown          above_7   \n",
              "1               radio_TV    5951              below_100      between_1_4   \n",
              "2              education    2096              below_100      between_4_7   \n",
              "3    furniture_equipment    7882              below_100      between_4_7   \n",
              "4                car_new    4870              below_100      between_1_4   \n",
              "..                   ...     ...                    ...              ...   \n",
              "995  furniture_equipment    1736              below_100      between_4_7   \n",
              "996             car_used    3857              below_100      between_1_4   \n",
              "997             radio_TV     804              below_100          above_7   \n",
              "998             radio_TV    1845              below_100      between_1_4   \n",
              "999             car_used    4576        between_100_500       unemployed   \n",
              "\n",
              "     installment_rate personal_status other_debtors  ...          property  \\\n",
              "0                   4        M_single          None  ...      real_estate    \n",
              "1                   2    F_not_single          None  ...      real_estate    \n",
              "2                   2        M_single          None  ...      real_estate    \n",
              "3                   2        M_single     guarantor  ...  life_insurance     \n",
              "4                   3        M_single          None  ...       no_property   \n",
              "..                ...             ...           ...  ...               ...   \n",
              "995                 3    F_not_single          None  ...      real_estate    \n",
              "996                 4      M_divorced          None  ...  life_insurance     \n",
              "997                 4        M_single          None  ...             other   \n",
              "998                 4        M_single          None  ...       no_property   \n",
              "999                 3        M_single          None  ...             other   \n",
              "\n",
              "    age  other_installment_plans housing number_of_credits         job  \\\n",
              "0    67                     None     own                 2    official   \n",
              "1    22                     None     own                 1    official   \n",
              "2    49                     None     own                 1   unskilled   \n",
              "3    45                     None    free                 1    official   \n",
              "4    53                     None    free                 2    official   \n",
              "..   ..                      ...     ...               ...         ...   \n",
              "995  31                     None     own                 1   unskilled   \n",
              "996  40                     None     own                 1  management   \n",
              "997  38                     None     own                 1    official   \n",
              "998  23                     None    free                 1    official   \n",
              "999  27                     None     own                 1    official   \n",
              "\n",
              "    people_liable  telephone  foreign_worker  full_repaid  \n",
              "0               1          1               1            1  \n",
              "1               1          0               1            0  \n",
              "2               2          0               1            1  \n",
              "3               2          0               1            1  \n",
              "4               2          0               1            0  \n",
              "..            ...        ...             ...          ...  \n",
              "995             1          0               1            1  \n",
              "996             1          1               1            1  \n",
              "997             1          0               1            1  \n",
              "998             1          1               1            0  \n",
              "999             1          0               1            1  \n",
              "\n",
              "[1000 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1d7aa49a-d5e8-4376-9d74-43c003868732\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>checking_account_status</th>\n",
              "      <th>duration</th>\n",
              "      <th>credit_history</th>\n",
              "      <th>purpose</th>\n",
              "      <th>amount</th>\n",
              "      <th>savings_account_status</th>\n",
              "      <th>employment_years</th>\n",
              "      <th>installment_rate</th>\n",
              "      <th>personal_status</th>\n",
              "      <th>other_debtors</th>\n",
              "      <th>...</th>\n",
              "      <th>property</th>\n",
              "      <th>age</th>\n",
              "      <th>other_installment_plans</th>\n",
              "      <th>housing</th>\n",
              "      <th>number_of_credits</th>\n",
              "      <th>job</th>\n",
              "      <th>people_liable</th>\n",
              "      <th>telephone</th>\n",
              "      <th>foreign_worker</th>\n",
              "      <th>full_repaid</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>below_0</td>\n",
              "      <td>6</td>\n",
              "      <td>critical_account</td>\n",
              "      <td>radio_TV</td>\n",
              "      <td>1169</td>\n",
              "      <td>unknown</td>\n",
              "      <td>above_7</td>\n",
              "      <td>4</td>\n",
              "      <td>M_single</td>\n",
              "      <td>None</td>\n",
              "      <td>...</td>\n",
              "      <td>real_estate</td>\n",
              "      <td>67</td>\n",
              "      <td>None</td>\n",
              "      <td>own</td>\n",
              "      <td>2</td>\n",
              "      <td>official</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0_to_200</td>\n",
              "      <td>48</td>\n",
              "      <td>existing_credit_paid</td>\n",
              "      <td>radio_TV</td>\n",
              "      <td>5951</td>\n",
              "      <td>below_100</td>\n",
              "      <td>between_1_4</td>\n",
              "      <td>2</td>\n",
              "      <td>F_not_single</td>\n",
              "      <td>None</td>\n",
              "      <td>...</td>\n",
              "      <td>real_estate</td>\n",
              "      <td>22</td>\n",
              "      <td>None</td>\n",
              "      <td>own</td>\n",
              "      <td>1</td>\n",
              "      <td>official</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>no_account</td>\n",
              "      <td>12</td>\n",
              "      <td>critical_account</td>\n",
              "      <td>education</td>\n",
              "      <td>2096</td>\n",
              "      <td>below_100</td>\n",
              "      <td>between_4_7</td>\n",
              "      <td>2</td>\n",
              "      <td>M_single</td>\n",
              "      <td>None</td>\n",
              "      <td>...</td>\n",
              "      <td>real_estate</td>\n",
              "      <td>49</td>\n",
              "      <td>None</td>\n",
              "      <td>own</td>\n",
              "      <td>1</td>\n",
              "      <td>unskilled</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>below_0</td>\n",
              "      <td>42</td>\n",
              "      <td>existing_credit_paid</td>\n",
              "      <td>furniture_equipment</td>\n",
              "      <td>7882</td>\n",
              "      <td>below_100</td>\n",
              "      <td>between_4_7</td>\n",
              "      <td>2</td>\n",
              "      <td>M_single</td>\n",
              "      <td>guarantor</td>\n",
              "      <td>...</td>\n",
              "      <td>life_insurance</td>\n",
              "      <td>45</td>\n",
              "      <td>None</td>\n",
              "      <td>free</td>\n",
              "      <td>1</td>\n",
              "      <td>official</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>below_0</td>\n",
              "      <td>24</td>\n",
              "      <td>delay_in_paying</td>\n",
              "      <td>car_new</td>\n",
              "      <td>4870</td>\n",
              "      <td>below_100</td>\n",
              "      <td>between_1_4</td>\n",
              "      <td>3</td>\n",
              "      <td>M_single</td>\n",
              "      <td>None</td>\n",
              "      <td>...</td>\n",
              "      <td>no_property</td>\n",
              "      <td>53</td>\n",
              "      <td>None</td>\n",
              "      <td>free</td>\n",
              "      <td>2</td>\n",
              "      <td>official</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>no_account</td>\n",
              "      <td>12</td>\n",
              "      <td>existing_credit_paid</td>\n",
              "      <td>furniture_equipment</td>\n",
              "      <td>1736</td>\n",
              "      <td>below_100</td>\n",
              "      <td>between_4_7</td>\n",
              "      <td>3</td>\n",
              "      <td>F_not_single</td>\n",
              "      <td>None</td>\n",
              "      <td>...</td>\n",
              "      <td>real_estate</td>\n",
              "      <td>31</td>\n",
              "      <td>None</td>\n",
              "      <td>own</td>\n",
              "      <td>1</td>\n",
              "      <td>unskilled</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>below_0</td>\n",
              "      <td>30</td>\n",
              "      <td>existing_credit_paid</td>\n",
              "      <td>car_used</td>\n",
              "      <td>3857</td>\n",
              "      <td>below_100</td>\n",
              "      <td>between_1_4</td>\n",
              "      <td>4</td>\n",
              "      <td>M_divorced</td>\n",
              "      <td>None</td>\n",
              "      <td>...</td>\n",
              "      <td>life_insurance</td>\n",
              "      <td>40</td>\n",
              "      <td>None</td>\n",
              "      <td>own</td>\n",
              "      <td>1</td>\n",
              "      <td>management</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>997</th>\n",
              "      <td>no_account</td>\n",
              "      <td>12</td>\n",
              "      <td>existing_credit_paid</td>\n",
              "      <td>radio_TV</td>\n",
              "      <td>804</td>\n",
              "      <td>below_100</td>\n",
              "      <td>above_7</td>\n",
              "      <td>4</td>\n",
              "      <td>M_single</td>\n",
              "      <td>None</td>\n",
              "      <td>...</td>\n",
              "      <td>other</td>\n",
              "      <td>38</td>\n",
              "      <td>None</td>\n",
              "      <td>own</td>\n",
              "      <td>1</td>\n",
              "      <td>official</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>998</th>\n",
              "      <td>below_0</td>\n",
              "      <td>45</td>\n",
              "      <td>existing_credit_paid</td>\n",
              "      <td>radio_TV</td>\n",
              "      <td>1845</td>\n",
              "      <td>below_100</td>\n",
              "      <td>between_1_4</td>\n",
              "      <td>4</td>\n",
              "      <td>M_single</td>\n",
              "      <td>None</td>\n",
              "      <td>...</td>\n",
              "      <td>no_property</td>\n",
              "      <td>23</td>\n",
              "      <td>None</td>\n",
              "      <td>free</td>\n",
              "      <td>1</td>\n",
              "      <td>official</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>0_to_200</td>\n",
              "      <td>45</td>\n",
              "      <td>critical_account</td>\n",
              "      <td>car_used</td>\n",
              "      <td>4576</td>\n",
              "      <td>between_100_500</td>\n",
              "      <td>unemployed</td>\n",
              "      <td>3</td>\n",
              "      <td>M_single</td>\n",
              "      <td>None</td>\n",
              "      <td>...</td>\n",
              "      <td>other</td>\n",
              "      <td>27</td>\n",
              "      <td>None</td>\n",
              "      <td>own</td>\n",
              "      <td>1</td>\n",
              "      <td>official</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1000 rows × 21 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1d7aa49a-d5e8-4376-9d74-43c003868732')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1d7aa49a-d5e8-4376-9d74-43c003868732 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1d7aa49a-d5e8-4376-9d74-43c003868732');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "# importa la base de datos llamada credit_risk.csv\n",
        "# https://raw.githubusercontent.com/jimmyzac/Estadistica-Aplicada-FCFM-UANL/main/bases_datos/credit_risk.csv\n",
        "bd = pd.read_csv('https://raw.githubusercontent.com/jimmyzac/Estadistica-Aplicada-FCFM-UANL/main/bases_datos/credit_risk.csv')\n",
        "bd"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "855695ab",
      "metadata": {
        "id": "855695ab"
      },
      "source": [
        "La base de datos es la información proporcionada por un banco donde nos muestra el tiempo que transcurre desde que un cliente pide un préstamo hasta que lo paga completamente (evento)\n",
        "\n",
        "a continuación se muestran la descripción de la base de datos\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "76a3eebd",
      "metadata": {
        "id": "76a3eebd"
      },
      "source": [
        "<style type=\"text/css\">\n",
        ".tg  {border-collapse:collapse;border-spacing:0;}\n",
        ".tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n",
        "  overflow:hidden;padding:10px 5px;word-break:normal;}\n",
        ".tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n",
        "  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n",
        ".tg .tg-fymr{border-color:inherit;font-weight:bold;text-align:left;vertical-align:top}\n",
        ".tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}\n",
        "</style>\n",
        "<table class=\"tg\">\n",
        "<thead>\n",
        "  <tr>\n",
        "    <th class=\"tg-fymr\">   <br>Característica   </th>\n",
        "    <th class=\"tg-fymr\">   <br>Variable   </th>\n",
        "    <th class=\"tg-fymr\">   <br>Tipo   </th>\n",
        "    <th class=\"tg-fymr\">   <br>Descripción   </th>\n",
        "  </tr>\n",
        "</thead>\n",
        "<tbody>\n",
        "  <tr>\n",
        "    <td class=\"tg-0pky\">   <br>Time   </td>\n",
        "    <td class=\"tg-0pky\">   <br>duration   </td>\n",
        "    <td class=\"tg-0pky\">   <br>numerical   </td>\n",
        "    <td class=\"tg-0pky\">   <br>Duration in month   </td>\n",
        "  </tr>\n",
        "  <tr>\n",
        "    <td class=\"tg-0pky\">   <br>Event   </td>\n",
        "    <td class=\"tg-0pky\">   <br>full_repaid   </td>\n",
        "    <td class=\"tg-0pky\">   <br>categorical   </td>\n",
        "    <td class=\"tg-0pky\">   <br>Specifies if the loan was fully   repaid   </td>\n",
        "  </tr>\n",
        "  <tr>\n",
        "    <td class=\"tg-0pky\">   <br>Socio-Demographic   </td>\n",
        "    <td class=\"tg-0pky\">   <br>age   </td>\n",
        "    <td class=\"tg-0pky\">   <br>numerical   </td>\n",
        "    <td class=\"tg-0pky\">   <br>Age of the borrower (in years)   </td>\n",
        "  </tr>\n",
        "  <tr>\n",
        "    <td class=\"tg-0pky\">   <br>Socio-Demographic   </td>\n",
        "    <td class=\"tg-0pky\">   <br>foreign_worker   </td>\n",
        "    <td class=\"tg-0pky\">   <br>numerical   </td>\n",
        "    <td class=\"tg-0pky\">   <br>Indicates if the borrower is a   foreign worker   </td>\n",
        "  </tr>\n",
        "  <tr>\n",
        "    <td class=\"tg-0pky\">   <br>Socio-Demographic   </td>\n",
        "    <td class=\"tg-0pky\">   <br>personal_status   </td>\n",
        "    <td class=\"tg-0pky\">   <br>categorical   </td>\n",
        "    <td class=\"tg-0pky\">   <br>Gender and Marital status   </td>\n",
        "  </tr>\n",
        "  <tr>\n",
        "    <td class=\"tg-0pky\">   <br>Socio-Demographic   </td>\n",
        "    <td class=\"tg-0pky\">   <br>people_liable   </td>\n",
        "    <td class=\"tg-0pky\">   <br>numerical   </td>\n",
        "    <td class=\"tg-0pky\">   <br>Number of people being liable to   provide maintenance for   </td>\n",
        "  </tr>\n",
        "  <tr>\n",
        "    <td class=\"tg-0pky\">   <br>Socio-Demographic   </td>\n",
        "    <td class=\"tg-0pky\">   <br>telephone   </td>\n",
        "    <td class=\"tg-0pky\">   <br>numerical   </td>\n",
        "    <td class=\"tg-0pky\">   <br>Indicates if the borrower owns a   phone   </td>\n",
        "  </tr>\n",
        "  <tr>\n",
        "    <td class=\"tg-0pky\">   <br>Employment   </td>\n",
        "    <td class=\"tg-0pky\">   <br>employment_years   </td>\n",
        "    <td class=\"tg-0pky\">   <br>categorical   </td>\n",
        "    <td class=\"tg-0pky\">   <br>Years of employment at current job   </td>\n",
        "  </tr>\n",
        "  <tr>\n",
        "    <td class=\"tg-0pky\">   <br>Employment   </td>\n",
        "    <td class=\"tg-0pky\">   <br>job   </td>\n",
        "    <td class=\"tg-0pky\">   <br>categorical   </td>\n",
        "    <td class=\"tg-0pky\">   <br>Employment status   </td>\n",
        "  </tr>\n",
        "  <tr>\n",
        "    <td class=\"tg-0pky\">   <br>Residence   </td>\n",
        "    <td class=\"tg-0pky\">   <br>housing   </td>\n",
        "    <td class=\"tg-0pky\">   <br>categorical   </td>\n",
        "    <td class=\"tg-0pky\">   <br>Residential status of the borrower   </td>\n",
        "  </tr>\n",
        "  <tr>\n",
        "    <td class=\"tg-0pky\">   <br>Residence   </td>\n",
        "    <td class=\"tg-0pky\">   <br>present_residence   </td>\n",
        "    <td class=\"tg-0pky\">   <br>numerical   </td>\n",
        "    <td class=\"tg-0pky\">   <br>Years living at current residence   </td>\n",
        "  </tr>\n",
        "  <tr>\n",
        "    <td class=\"tg-0pky\">   <br>Loan   information   </td>\n",
        "    <td class=\"tg-0pky\">   <br>amount   </td>\n",
        "    <td class=\"tg-0pky\">   <br>numerical   </td>\n",
        "    <td class=\"tg-0pky\">   <br>Amount of money borrowed   </td>\n",
        "  </tr>\n",
        "  <tr>\n",
        "    <td class=\"tg-0pky\">   <br>Loan   information   </td>\n",
        "    <td class=\"tg-0pky\">   <br>installment_rate   </td>\n",
        "    <td class=\"tg-0pky\">   <br>numerical   </td>\n",
        "    <td class=\"tg-0pky\">   <br>Percentage of amount borrowed that   will be charged by a lender to a borrower.   </td>\n",
        "  </tr>\n",
        "  <tr>\n",
        "    <td class=\"tg-0pky\">   <br>Loan   information   </td>\n",
        "    <td class=\"tg-0pky\">   <br>purpose   </td>\n",
        "    <td class=\"tg-0pky\">   <br>categorical   </td>\n",
        "    <td class=\"tg-0pky\">   <br>Reason to get a loan   </td>\n",
        "  </tr>\n",
        "  <tr>\n",
        "    <td class=\"tg-0pky\">   <br>Bank   information   </td>\n",
        "    <td class=\"tg-0pky\">   <br>checking_account_status   </td>\n",
        "    <td class=\"tg-0pky\">   <br>categorical   </td>\n",
        "    <td class=\"tg-0pky\">   <br>Status of the checking account   </td>\n",
        "  </tr>\n",
        "  <tr>\n",
        "    <td class=\"tg-0pky\">   <br>Bank   information   </td>\n",
        "    <td class=\"tg-0pky\">   <br>credit_history   </td>\n",
        "    <td class=\"tg-0pky\">   <br>categorical   </td>\n",
        "    <td class=\"tg-0pky\">   <br>Credit history of the borrower   </td>\n",
        "  </tr>\n",
        "  <tr>\n",
        "    <td class=\"tg-0pky\">   <br>Bank   information   </td>\n",
        "    <td class=\"tg-0pky\">   <br>number_of_credits   </td>\n",
        "    <td class=\"tg-0pky\">   <br>numerical   </td>\n",
        "    <td class=\"tg-0pky\">   <br>Number of existing credits at this   bank   </td>\n",
        "  </tr>\n",
        "  <tr>\n",
        "    <td class=\"tg-0pky\">   <br>Bank   information   </td>\n",
        "    <td class=\"tg-0pky\">   <br>other_installment_plans   </td>\n",
        "    <td class=\"tg-0pky\">   <br>categorical   </td>\n",
        "    <td class=\"tg-0pky\">   <br>Type of installments plans the   borrower already has   </td>\n",
        "  </tr>\n",
        "  <tr>\n",
        "    <td class=\"tg-0pky\">   <br>Bank   information   </td>\n",
        "    <td class=\"tg-0pky\">   <br>savings_account_status   </td>\n",
        "    <td class=\"tg-0pky\">   <br>categorical   </td>\n",
        "    <td class=\"tg-0pky\">   <br>Status of the saving account   </td>\n",
        "  </tr>\n",
        "  <tr>\n",
        "    <td class=\"tg-0pky\">   <br>Collateral/Guarantor   </td>\n",
        "    <td class=\"tg-0pky\">   <br>property   </td>\n",
        "    <td class=\"tg-0pky\">   <br>categorical   </td>\n",
        "    <td class=\"tg-0pky\">   <br>Type of valuable assets the   borrower owns   </td>\n",
        "  </tr>\n",
        "  <tr>\n",
        "    <td class=\"tg-0pky\">   <br>Collateral/Guarantor   </td>\n",
        "    <td class=\"tg-0pky\">   <br>other_debtors   </td>\n",
        "    <td class=\"tg-0pky\">   <br>categorical   </td>\n",
        "    <td class=\"tg-0pky\">   <br>Indicate if someone else will be   involved in the repayment or is guaranteeing the loan   </td>\n",
        "  </tr>\n",
        "</tbody>\n",
        "</table>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3598e071",
      "metadata": {
        "id": "3598e071"
      },
      "source": [
        "1. El banco sospecha que entre mas pasa el tiempo más díficil es que puedan pagar los clientes que se les concedió un préstamo. \n",
        "\n",
        "a) Calcula el promedio del monto del préstamo de los que pagaron y el promedio del monto de los que no han pagado.\n",
        "\n",
        "b) Ajusta un modelo weibull y un modelo log-normal y graficas las funciones de riesgo respectivas. \n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d5e6190a",
      "metadata": {
        "id": "d5e6190a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c10a3b0c-26bc-43ff-8db0-1511c7ef88cf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El promedio del monto de prestamo de los que liquidaron es de 2985.46\n",
            "El promedio del monto de prestamo de los que no han liquidado es de 3938.13\n"
          ]
        }
      ],
      "source": [
        "liq = bd.query('full_repaid==1')\n",
        "nliq = bd.query('full_repaid==0')\n",
        "liq_prom = liq.amount.mean().round(2)\n",
        "nliq_prom = nliq.amount.mean().round(2)\n",
        "print(f'El promedio del monto de prestamo de los que liquidaron es de {liq_prom}\\nEl promedio del monto de prestamo de los que no han liquidado es de {nliq_prom}')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install lifelines"
      ],
      "metadata": {
        "id": "u7gmM26KvzCB",
        "outputId": "2e2a066b-f092-4a4e-e31b-f4bb70662e25",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "id": "u7gmM26KvzCB",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting lifelines\n",
            "  Downloading lifelines-0.27.4-py3-none-any.whl (349 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m349.7/349.7 KB\u001b[0m \u001b[31m14.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: numpy>=1.14.0 in /usr/local/lib/python3.9/dist-packages (from lifelines) (1.22.4)\n",
            "Requirement already satisfied: matplotlib>=3.0 in /usr/local/lib/python3.9/dist-packages (from lifelines) (3.7.1)\n",
            "Requirement already satisfied: pandas>=1.0.0 in /usr/local/lib/python3.9/dist-packages (from lifelines) (1.4.4)\n",
            "Collecting formulaic>=0.2.2\n",
            "  Downloading formulaic-0.5.2-py3-none-any.whl (77 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m77.1/77.1 KB\u001b[0m \u001b[31m9.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: scipy>=1.2.0 in /usr/local/lib/python3.9/dist-packages (from lifelines) (1.10.1)\n",
            "Requirement already satisfied: autograd>=1.5 in /usr/local/lib/python3.9/dist-packages (from lifelines) (1.5)\n",
            "Collecting autograd-gamma>=0.3\n",
            "  Downloading autograd-gamma-0.5.0.tar.gz (4.0 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: future>=0.15.2 in /usr/local/lib/python3.9/dist-packages (from autograd>=1.5->lifelines) (0.18.3)\n",
            "Collecting astor>=0.8\n",
            "  Downloading astor-0.8.1-py2.py3-none-any.whl (27 kB)\n",
            "Requirement already satisfied: wrapt>=1.0 in /usr/local/lib/python3.9/dist-packages (from formulaic>=0.2.2->lifelines) (1.14.1)\n",
            "Requirement already satisfied: typing-extensions>=4.2.0 in /usr/local/lib/python3.9/dist-packages (from formulaic>=0.2.2->lifelines) (4.5.0)\n",
            "Collecting interface-meta>=1.2.0\n",
            "  Downloading interface_meta-1.3.0-py3-none-any.whl (14 kB)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.9/dist-packages (from matplotlib>=3.0->lifelines) (23.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.9/dist-packages (from matplotlib>=3.0->lifelines) (3.0.9)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.9/dist-packages (from matplotlib>=3.0->lifelines) (4.39.3)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.9/dist-packages (from matplotlib>=3.0->lifelines) (8.4.0)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.9/dist-packages (from matplotlib>=3.0->lifelines) (1.0.7)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.9/dist-packages (from matplotlib>=3.0->lifelines) (0.11.0)\n",
            "Requirement already satisfied: importlib-resources>=3.2.0 in /usr/local/lib/python3.9/dist-packages (from matplotlib>=3.0->lifelines) (5.12.0)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.9/dist-packages (from matplotlib>=3.0->lifelines) (2.8.2)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.9/dist-packages (from matplotlib>=3.0->lifelines) (1.4.4)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.9/dist-packages (from pandas>=1.0.0->lifelines) (2022.7.1)\n",
            "Requirement already satisfied: zipp>=3.1.0 in /usr/local/lib/python3.9/dist-packages (from importlib-resources>=3.2.0->matplotlib>=3.0->lifelines) (3.15.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.9/dist-packages (from python-dateutil>=2.7->matplotlib>=3.0->lifelines) (1.16.0)\n",
            "Building wheels for collected packages: autograd-gamma\n",
            "  Building wheel for autograd-gamma (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for autograd-gamma: filename=autograd_gamma-0.5.0-py3-none-any.whl size=4049 sha256=a4c81e9bbbedbd5f53f0b7f2db80eb8772d1da4df5fd983f7c873fd5a24344c7\n",
            "  Stored in directory: /root/.cache/pip/wheels/a8/03/64/8557323821d25118c3a2dc1646996f7a962a8970d4b7d22473\n",
            "Successfully built autograd-gamma\n",
            "Installing collected packages: interface-meta, astor, autograd-gamma, formulaic, lifelines\n",
            "Successfully installed astor-0.8.1 autograd-gamma-0.5.0 formulaic-0.5.2 interface-meta-1.3.0 lifelines-0.27.4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from lifelines import WeibullFitter\n",
        "weib = WeibullFitter().fit(bd['duration'],bd['full_repaid'])\n",
        "weib.plot_hazard()\n",
        "plt.ylim(0,0.14)\n",
        "plt.xlim(4,72);"
      ],
      "metadata": {
        "id": "56D9EI4XwFSE",
        "outputId": "40f3d030-9a97-4ad3-bce6-a11acdea0dd7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 435
        }
      },
      "id": "56D9EI4XwFSE",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from lifelines import LogNormalFitter \n",
        "logn = LogNormalFitter().fit(bd['duration'],bd['full_repaid'])\n",
        "logn.plot_hazard()\n",
        "plt.ylim(0,0.14)\n",
        "plt.xlim(4,72);"
      ],
      "metadata": {
        "id": "Yc5sUSjIyaQu",
        "outputId": "b3d5d88b-3c6f-46fd-bb3a-0273e55498b1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 435
        }
      },
      "id": "Yc5sUSjIyaQu",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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ysqCyWTCBx98gFGjRgEA3G43Dh48iMsvv7zN5zQYDKioqMB3vvOdVq0sF154Id555x29WyX+epMnT+7x97Zz506oqop169bprRP//d//3e3nu/jii3HgwAGMGzeu3X1sNhuuueYaXHPNNVi6dCkmTZqEvXv34uKLL4bZbIaiKN1+/fZ05X229dozZsyAoiiora3FV7/61R4/ro4wsBARUbvcbjf27NmTsO2nP/0pKisrcdttt2HZsmU4cOAA1qxZg/LychgMBqSnp2Px4sW44447MGzYMOTm5mLNmjUwGAwdrlQ9f/58lJSU4KmnnoLL5dK333HHHfj+97+PGTNmoKysDK+88gr+/Oc/47XXXuvx9ztu3DhEIhH86le/wjXXXIN33nkHGzdu7PbzrV69GldffTVGjRqF7373uzAYDPjoo4+wb98+3H///Xj22WehKApKSkpgt9vxhz/8ATabDaNHjwagdfW89dZb+MEPfgCLxYKcnJw+e59FRUXwer2oqqrC9OnTYbfbMWHCBNxwww1YtGgR1q1bhxkzZqCurg5VVVWYNm0a5s+f3yPH1xYOayYiona9+eabmDFjRsLlX//1X/Hqq69ix44dmD59Om6++WbcdNNNuPvuu/XHPfrooygtLcXVV1+NsrIyXHbZZbjwwgs7Xan3oYceQjAYTNi2YMECPP7441i7di0uuugiPPXUU3jmmWdwxRVX9Pj7nT59Oh599FE89NBDmDJlCv74xz+ioqKi2883b948bN68GX//+98xe/ZsXHLJJXjsscf0QJKZmYnf/OY3uOyyyzBt2jS89tpreOWVV/R6kF/+8pc4evQoLrjgAgwfPrxH3iPQtfd56aWX4uabb8bChQsxfPhwPPzwwwC0AupFixbh5z//OSZOnIgFCxYktKb1Fkn05MD8fuLxeOB0OuF2u5GRkdHfh0NEpAsGgzhy5AjGjBnT6Yf1YObz+VBQUIB169bhpptu6u/DoT7W3v+DZD6/2SVEREQ9bvfu3di/fz/mzJkDt9uNX/7ylwCAa6+9tp+PjAYqdgkREVGvWLt2LaZPn46ysjL4fD68/fbbPVaDkSouuugiOByONi9//OMf+/vwBhW2sBARUY+bMWMGdu7c2d+H0eteffXVdtctalk4TOePgYWIiKib4sWz1PvYJURE1AcGwfgGom7rid9/BhYiol4U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z5+PTZs24cMPP8TTTz8NAMjIyMDcuXNxxx13wGazYfTo0di2bRt+//vf49FHH+3Bt0pEREQDVdKBZeHChairq8Pq1atRXV2N4uJibNmyRS+sPX78eEJryaWXXornnnsOd999N+666y6MHz8eL730EqZMmaLvs2nTJqxatQo33HADzp49i9GjR+OBBx7AzTff3ANvkYiIiAa6pOdhSUWch4WIiGjg6bV5WIiIiIj6AwMLERERpTwGFiIiIkp5DCxERESU8hhYiIiIKOUxsBAREVHKY2AhIiKilMfAQkRERCmPgYWIiIhSHgMLERERpTwGFiIiIkp5DCxERESU8hhYiIiIKOUxsBAREVHKY2AhIiKilMfAQkRERCmPgYWIiIhSHgMLERERpTwGFiIiIkp5DCxERESU8hhYiIiIKOUxsBAREVHKY2AhIiKilMfAQkRERCmPgYWIiIhSHgMLERERpTwGFiIiIkp5DCxERESU8hhYiIiIKOUxsBAREVHKY2AhIiKilMfAQkRERCmPgYWIiIhSHgMLERERpTwGFiIiIkp5DCxERESU8hhYiIiIKOUxsBAREVHKY2AhIiKilMfAQkRERCmPgYWIiIhSHgMLERERpbxuBZYNGzagqKgIVqsVJSUl2LFjR4f7v/DCC5g0aRKsViumTp2KV199tdU+n332Gb71rW/B6XQiLS0Ns2fPxvHjx7tzeERERDTIJB1Ynn/+eZSXl2PNmjXYtWsXpk+fjnnz5qG2trbN/d99911cf/31uOmmm7B7924sWLAACxYswL59+/R9Dh8+jK985SuYNGkS3nzzTXz88ce45557YLVau//OiIiIaNCQhBAimQeUlJRg9uzZWL9+PQBAVVUUFhbitttuw8qVK1vtv3DhQvh8PmzevFnfdskll6C4uBgbN24EAPzgBz+AyWTCf/7nf3brTXg8HjidTrjdbmRkZHTrOYiIiKhvJfP5nVQLSzgcxs6dO1FWVtb8BAYDysrKsH379jYfs3379oT9AWDevHn6/qqq4n//938xYcIEzJs3D7m5uSgpKcFLL73U7nGEQiF4PJ6EC1EqE0IkXIiIKDnGZHaur6+HoihwuVwJ210uF/bv39/mY6qrq9vcv7q6GgBQW1sLr9eLBx98EPfffz8eeughbNmyBd/5znfwxhtvYO7cua2es6KiAvfdd18yh07U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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "6984ff5e",
      "metadata": {
        "id": "6984ff5e"
      },
      "source": [
        "c) comenta que significa la grafica de la función de riesgo de la weibull respecto a si los clientes tardan en pagar"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Entre mas tiempo pasa es mas probable que liquide su deuda."
      ],
      "metadata": {
        "id": "FbxHDf_ly5r2"
      },
      "id": "FbxHDf_ly5r2"
    },
    {
      "cell_type": "markdown",
      "id": "34a4ea74",
      "metadata": {
        "id": "34a4ea74"
      },
      "source": [
        "d) comenta que significa la grafica de la función de riesgo de la log-normal respecto a si los clientes tardan en pagar"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Entre mas tiempo pasa es menos probable que liquide su deuda."
      ],
      "metadata": {
        "id": "48cKYNTsy6Pv"
      },
      "id": "48cKYNTsy6Pv"
    },
    {
      "cell_type": "markdown",
      "id": "a96f28ed",
      "metadata": {
        "id": "a96f28ed"
      },
      "source": [
        "2. Estima la función de supervivencia por el método de Kaplan-Meier para el tiempo que tardan los clientes en pagar y muestra su gráfica correspondiente"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from lifelines import KaplanMeierFitter\n",
        "km = KaplanMeierFitter().fit(bd['duration'], bd['full_repaid'])"
      ],
      "metadata": {
        "id": "X6pAkootzkah"
      },
      "id": "X6pAkootzkah",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "km.plot_survival_function()"
      ],
      "metadata": {
        "id": "gNNA1NB0zxpU",
        "outputId": "cbf92033-678b-449d-8685-b7f85eaedc22",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        }
      },
      "id": "gNNA1NB0zxpU",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='timeline'>"
            ]
          },
          "metadata": {},
          "execution_count": 23
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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RYUef/xxfec731F2drYyMzPl9Xoj3nvVqlUKhUJ66KGHwsMKVqxYoby8PG3atEmXXnppm3427dHpn3Tjx4/X888/H3Fsw4YN4V9eKjMMQ4/OHqd17+5XtsupDNepl8n1BkKas2prF5QOANqusTXZqveOxdlnn63q6mqVlZVp3Lhxys7ObnZN7969NWnSJK1cuVKmaWrSpEnKz89v83vs2rVL9fX1+sY3vhFx3Ofzhbt6rrvuOn3rW9/Stm3bdOmll2rKlCk699xzY6pLY30a2e129erVS2eddVb4WONQiMY9YiRp2bJlevjhh1VZWaljx47J5/Np1KhRrb7P//3f/2nXrl3KycmJON7Q0KDdu3fHXO5YxBxGjh49ql27doW/37Nnj7Zv366ePXuqqKhICxcu1GeffaZHH31UkjRnzhzdf//9+tnPfqbZs2frpZde0uOPP661a9fGrxYJzDAMuR12yZDa0u1phph5AyDxNLYmJ4P+/fvrySef1EUXXaTLLrtML7zwQrMPWOl4V828efMkqc3LVTQ6evSoJGnt2rXq379/xLnGlv3LL79ce/fu1fPPP68NGzbokksu0dy5c3X33XfH9F5OpzPie8MwIo41tmI07q68evVqLViwQPfcc4/Gjx+vnJwc3XXXXXrjjTdOWacxY8bor3/9a7NzjS05nSXm/7PeeustXXTRReHvG8d2zJgxQytXrtT+/ftVWVkZPj948GCtXbtWN954o5YuXaoBAwbooYce0sSJ1iTsruawGcpyO1TvDcgfPPXYFG8geOJrP9t2A0B7DBw4UJs3bw4HknXr1jULJJdddpl8Pp8Mw4j5M2nEiBFyu92qrKzUBRdc0OJ1vXv31owZMzRjxgydf/75+q//+i/dfffd4fEXjXsAxdNrr72mc889Vz/+8Y/Dx05u2XC5XM3e+5xzztGaNWvUp08fde/ePe7lak3MYeTCCy9sdWRztPnRF154od5+++1Y3yolZDjtmjAkX4E2tnjUN5lFE6KVBADarbCwUJs2bdJFF12kiRMnat26dRHn7Xa7Pvjgg/DXscjJydGCBQt04403KhQKacKECTpy5Ihee+01de/eXTNmzNCiRYs0ZswYnXHGGfJ6vXruuec0fPhwSVKfPn2UmZmpdevWacCAAcrIyIjbtN6hQ4fq0Ucf1fr16zV48GD95S9/0Ztv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SeaKFSvC1xw7dsz88Y9/bPbo0cPMysoyr7zySnP//v3WFToOZs+ebQ4cONB0uVxm7969zUsuuSQcREwzNevcmpPDSKrWf+rUqWa/fv1Ml8tl9u/f35w6daq5a9eu8PlUrbdpmuazzz5rnnnmmabb7TZPP/10809/+lPE+VT9G2eaprl+/XpTUtT6JNvv3DBN07SkSQYAAEBpOmYEAAAkDsIIAACwFGEEAABYijACAAAsRRgBAACWIowAAABLEUYAAIClCCMAAMBShBEAbbJp0yYZhtFs8614W7lyZcTW54sXL9aoUaM69T0BWIswAiCqCy+8UPPnzw9/f+6552r//v3Kzc3t0nIsWLAgYsMvAKnHYXUBACQHl8tlyfbj2dnZys7O7vL3BdB1aBkB0MzMmTO1efNmLV26VIZhyDAMrVy5MqKbprE75bnnntOwYcOUlZWlq6++WvX19XrkkUc0aNAg9ejRQz/5yU8UDAbDz/Z6vVqwYIH69++vbt26qbi4WJs2bWqxLCd308ycOVNTpkzR3XffrX79+qlXr16aO3eu/H5/u98DgLVoGQHQzNKlS/XRRx/pzDPP1O233y5Jeu+995pdV19fr/vuu0+rV69WbW2trrrqKl155ZXKy8vT888/r08++UTf+ta3dN5552nq1KmSpHnz5un999/X6tWrVVBQoKefflqXXXaZduzYoaFDh7apfC+//LL69eunl19+Wbt27dLUqVM1atQoXXvttXF7DwBdhzACoJnc3Fy5XC5lZWWFu2Y+/PDDZtf5/X498MAD+spXviJJuvrqq/WXv/xFVVVVys7O1ogRI3TRRRfp5Zdf1tSpU1VZWakVK1aosrJSBQUFko6PCVm3bp1WrFihO+64o03l69Gjh+6//37Z7XadfvrpmjRpkjZu3Khrr702bu8BoOsQRgC0W1ZWVjiISJLH49GgQYMixnh4PB4dPHhQkrRjxw4Fg0F99atfjXiO1+tVr1692vy+Z5xxhux2e/j7fv36aceOHXF9DwBdhzACoN2cTmfE94ZhRD0WCoUkSUePHpXdbtfWrVsjwoSkmAapdsV7AOg6hBEAUblcroiBp/EwevRoBYNBHTx4UOeff35cn92V7wEgvphNAyCqQYMG6Y033tCnn36q6urqcMtDR3z1q1/VtGnTNH36dD311FPas2ePtmzZovLycq1duzYOpe6a9wAQX4QRAFEtWLBAdrtdI0aMUO/evVVZWRmX565YsULTp0/XT3/6Uw0bNkxTpkzRm2++qaKiorg8v6veA0D8GKZpmlYXAgAApC9aRgAAgKUIIwAAwFKEEQAAYCnCCAAAsBRhBAAAWIowAgAALEUYAQAAliKMAAAASxFGAACApQgjAADAUoQRAABgqf8PW98+NWqD42AAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "046ecc43",
      "metadata": {
        "id": "046ecc43"
      },
      "source": [
        "3. Coloca la gráfica de kaplan Meier sobre la grafica de supervivencia log-normal "
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "km.plot_survival_function()\n",
        "logn.plot_hazard()"
      ],
      "metadata": {
        "id": "6NBZCE2k0GGd",
        "outputId": "d53bf851-a479-4a3c-91d7-cd289db9bfe4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        }
      },
      "id": "6NBZCE2k0GGd",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='timeline'>"
            ]
          },
          "metadata": {},
          "execution_count": 24
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7c15ea02",
      "metadata": {
        "id": "7c15ea02"
      },
      "source": [
        "4. Comenta si las graficas se parecen o no, y en que se diferencian"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Se logra apreciar que ambas graficas se aproximan a un mismo punto, mientras la gafrica kaplan-meier es decendente, la grafica log-normal es asendente"
      ],
      "metadata": {
        "id": "kMDWlqka0YcQ"
      },
      "id": "kMDWlqka0YcQ"
    },
    {
      "cell_type": "markdown",
      "id": "e0f1b7d6",
      "metadata": {
        "id": "e0f1b7d6"
      },
      "source": [
        "5. El banco considera que los que piden préstado una gran cantidad de dinero en realidad nunca piensa pagar\n",
        "\n",
        "a) calcula la mediana de la cantidad que pidieron prestado (amount of money borrowed), asigna un 1 a quienes se encuentran igual o arriba de la mediana (deben mucho) y 0 a los que se encuentran debajo de la mediana (deben poco)\n",
        "\n",
        "b) Elabora y grafica juntas las funciones de supervivencia por el método de Kaplan-Meier para los que deben mucho y para los que deben poco.\n",
        "\n",
        "c)Interpreta las graficas de supervivencia, ¿qué significan? ¿quién paga más rápido? ¿quién tarda en pagar más?  \n",
        "\n",
        "d)Elabora un log-rank test para comprobar si las funciones de supervivencia de los que deben mucho y los que deben poco son distintas, e interpreta el resultado de la prueba\n",
        "\n",
        "e) ¿el banco tenía razón? Explique"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mediana=bd[\"amount\"].median()"
      ],
      "metadata": {
        "id": "JlzU-083CwzY"
      },
      "id": "JlzU-083CwzY",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "bd.loc[bd['amount'] >= mediana, 'median'] = 1\n",
        "bd.loc[bd['amount'] < mediana, 'median'] = 0"
      ],
      "metadata": {
        "id": "70TNtTdvKev3"
      },
      "id": "70TNtTdvKev3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "bd['median'] = bd['median'].astype(np.int64)\n",
        "bd"
      ],
      "metadata": {
        "id": "eYVnksaaNz5l",
        "outputId": "106ce37a-2209-4a0c-8b16-2e9c79109e88",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        }
      },
      "id": "eYVnksaaNz5l",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    checking_account_status  duration        credit_history  \\\n",
              "0                   below_0         6      critical_account   \n",
              "1                  0_to_200        48  existing_credit_paid   \n",
              "2                no_account        12      critical_account   \n",
              "3                   below_0        42  existing_credit_paid   \n",
              "4                   below_0        24       delay_in_paying   \n",
              "..                      ...       ...                   ...   \n",
              "995              no_account        12  existing_credit_paid   \n",
              "996                 below_0        30  existing_credit_paid   \n",
              "997              no_account        12  existing_credit_paid   \n",
              "998                 below_0        45  existing_credit_paid   \n",
              "999                0_to_200        45      critical_account   \n",
              "\n",
              "                 purpose  amount savings_account_status employment_years  \\\n",
              "0               radio_TV    1169                unknown          above_7   \n",
              "1               radio_TV    5951              below_100      between_1_4   \n",
              "2              education    2096              below_100      between_4_7   \n",
              "3    furniture_equipment    7882              below_100      between_4_7   \n",
              "4                car_new    4870              below_100      between_1_4   \n",
              "..                   ...     ...                    ...              ...   \n",
              "995  furniture_equipment    1736              below_100      between_4_7   \n",
              "996             car_used    3857              below_100      between_1_4   \n",
              "997             radio_TV     804              below_100          above_7   \n",
              "998             radio_TV    1845              below_100      between_1_4   \n",
              "999             car_used    4576        between_100_500       unemployed   \n",
              "\n",
              "     installment_rate personal_status other_debtors  ...  age  \\\n",
              "0                   4        M_single          None  ...   67   \n",
              "1                   2    F_not_single          None  ...   22   \n",
              "2                   2        M_single          None  ...   49   \n",
              "3                   2        M_single     guarantor  ...   45   \n",
              "4                   3        M_single          None  ...   53   \n",
              "..                ...             ...           ...  ...  ...   \n",
              "995                 3    F_not_single          None  ...   31   \n",
              "996                 4      M_divorced          None  ...   40   \n",
              "997                 4        M_single          None  ...   38   \n",
              "998                 4        M_single          None  ...   23   \n",
              "999                 3        M_single          None  ...   27   \n",
              "\n",
              "    other_installment_plans  housing number_of_credits         job  \\\n",
              "0                      None      own                 2    official   \n",
              "1                      None      own                 1    official   \n",
              "2                      None      own                 1   unskilled   \n",
              "3                      None     free                 1    official   \n",
              "4                      None     free                 2    official   \n",
              "..                      ...      ...               ...         ...   \n",
              "995                    None      own                 1   unskilled   \n",
              "996                    None      own                 1  management   \n",
              "997                    None      own                 1    official   \n",
              "998                    None     free                 1    official   \n",
              "999                    None      own                 1    official   \n",
              "\n",
              "     people_liable telephone  foreign_worker  full_repaid  median  \n",
              "0                1         1               1            1       0  \n",
              "1                1         0               1            0       1  \n",
              "2                2         0               1            1       0  \n",
              "3                2         0               1            1       1  \n",
              "4                2         0               1            0       1  \n",
              "..             ...       ...             ...          ...     ...  \n",
              "995              1         0               1            1       0  \n",
              "996              1         1               1            1       1  \n",
              "997              1         0               1            1       0  \n",
              "998              1         1               1            0       0  \n",
              "999              1         0               1            1       1  \n",
              "\n",
              "[1000 rows x 22 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-702e76ae-018c-4ddb-ace2-58d9b113c626\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>checking_account_status</th>\n",
              "      <th>duration</th>\n",
              "      <th>credit_history</th>\n",
              "      <th>purpose</th>\n",
              "      <th>amount</th>\n",
              "      <th>savings_account_status</th>\n",
              "      <th>employment_years</th>\n",
              "      <th>installment_rate</th>\n",
              "      <th>personal_status</th>\n",
              "      <th>other_debtors</th>\n",
              "      <th>...</th>\n",
              "      <th>age</th>\n",
              "      <th>other_installment_plans</th>\n",
              "      <th>housing</th>\n",
              "      <th>number_of_credits</th>\n",
              "      <th>job</th>\n",
              "      <th>people_liable</th>\n",
              "      <th>telephone</th>\n",
              "      <th>foreign_worker</th>\n",
              "      <th>full_repaid</th>\n",
              "      <th>median</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>below_0</td>\n",
              "      <td>6</td>\n",
              "      <td>critical_account</td>\n",
              "      <td>radio_TV</td>\n",
              "      <td>1169</td>\n",
              "      <td>unknown</td>\n",
              "      <td>above_7</td>\n",
              "      <td>4</td>\n",
              "      <td>M_single</td>\n",
              "      <td>None</td>\n",
              "      <td>...</td>\n",
              "      <td>67</td>\n",
              "      <td>None</td>\n",
              "      <td>own</td>\n",
              "      <td>2</td>\n",
              "      <td>official</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0_to_200</td>\n",
              "      <td>48</td>\n",
              "      <td>existing_credit_paid</td>\n",
              "      <td>radio_TV</td>\n",
              "      <td>5951</td>\n",
              "      <td>below_100</td>\n",
              "      <td>between_1_4</td>\n",
              "      <td>2</td>\n",
              "      <td>F_not_single</td>\n",
              "      <td>None</td>\n",
              "      <td>...</td>\n",
              "      <td>22</td>\n",
              "      <td>None</td>\n",
              "      <td>own</td>\n",
              "      <td>1</td>\n",
              "      <td>official</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>no_account</td>\n",
              "      <td>12</td>\n",
              "      <td>critical_account</td>\n",
              "      <td>education</td>\n",
              "      <td>2096</td>\n",
              "      <td>below_100</td>\n",
              "      <td>between_4_7</td>\n",
              "      <td>2</td>\n",
              "      <td>M_single</td>\n",
              "      <td>None</td>\n",
              "      <td>...</td>\n",
              "      <td>49</td>\n",
              "      <td>None</td>\n",
              "      <td>own</td>\n",
              "      <td>1</td>\n",
              "      <td>unskilled</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>below_0</td>\n",
              "      <td>42</td>\n",
              "      <td>existing_credit_paid</td>\n",
              "      <td>furniture_equipment</td>\n",
              "      <td>7882</td>\n",
              "      <td>below_100</td>\n",
              "      <td>between_4_7</td>\n",
              "      <td>2</td>\n",
              "      <td>M_single</td>\n",
              "      <td>guarantor</td>\n",
              "      <td>...</td>\n",
              "      <td>45</td>\n",
              "      <td>None</td>\n",
              "      <td>free</td>\n",
              "      <td>1</td>\n",
              "      <td>official</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>below_0</td>\n",
              "      <td>24</td>\n",
              "      <td>delay_in_paying</td>\n",
              "      <td>car_new</td>\n",
              "      <td>4870</td>\n",
              "      <td>below_100</td>\n",
              "      <td>between_1_4</td>\n",
              "      <td>3</td>\n",
              "      <td>M_single</td>\n",
              "      <td>None</td>\n",
              "      <td>...</td>\n",
              "      <td>53</td>\n",
              "      <td>None</td>\n",
              "      <td>free</td>\n",
              "      <td>2</td>\n",
              "      <td>official</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>no_account</td>\n",
              "      <td>12</td>\n",
              "      <td>existing_credit_paid</td>\n",
              "      <td>furniture_equipment</td>\n",
              "      <td>1736</td>\n",
              "      <td>below_100</td>\n",
              "      <td>between_4_7</td>\n",
              "      <td>3</td>\n",
              "      <td>F_not_single</td>\n",
              "      <td>None</td>\n",
              "      <td>...</td>\n",
              "      <td>31</td>\n",
              "      <td>None</td>\n",
              "      <td>own</td>\n",
              "      <td>1</td>\n",
              "      <td>unskilled</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>below_0</td>\n",
              "      <td>30</td>\n",
              "      <td>existing_credit_paid</td>\n",
              "      <td>car_used</td>\n",
              "      <td>3857</td>\n",
              "      <td>below_100</td>\n",
              "      <td>between_1_4</td>\n",
              "      <td>4</td>\n",
              "      <td>M_divorced</td>\n",
              "      <td>None</td>\n",
              "      <td>...</td>\n",
              "      <td>40</td>\n",
              "      <td>None</td>\n",
              "      <td>own</td>\n",
              "      <td>1</td>\n",
              "      <td>management</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>997</th>\n",
              "      <td>no_account</td>\n",
              "      <td>12</td>\n",
              "      <td>existing_credit_paid</td>\n",
              "      <td>radio_TV</td>\n",
              "      <td>804</td>\n",
              "      <td>below_100</td>\n",
              "      <td>above_7</td>\n",
              "      <td>4</td>\n",
              "      <td>M_single</td>\n",
              "      <td>None</td>\n",
              "      <td>...</td>\n",
              "      <td>38</td>\n",
              "      <td>None</td>\n",
              "      <td>own</td>\n",
              "      <td>1</td>\n",
              "      <td>official</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>998</th>\n",
              "      <td>below_0</td>\n",
              "      <td>45</td>\n",
              "      <td>existing_credit_paid</td>\n",
              "      <td>radio_TV</td>\n",
              "      <td>1845</td>\n",
              "      <td>below_100</td>\n",
              "      <td>between_1_4</td>\n",
              "      <td>4</td>\n",
              "      <td>M_single</td>\n",
              "      <td>None</td>\n",
              "      <td>...</td>\n",
              "      <td>23</td>\n",
              "      <td>None</td>\n",
              "      <td>free</td>\n",
              "      <td>1</td>\n",
              "      <td>official</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>0_to_200</td>\n",
              "      <td>45</td>\n",
              "      <td>critical_account</td>\n",
              "      <td>car_used</td>\n",
              "      <td>4576</td>\n",
              "      <td>between_100_500</td>\n",
              "      <td>unemployed</td>\n",
              "      <td>3</td>\n",
              "      <td>M_single</td>\n",
              "      <td>None</td>\n",
              "      <td>...</td>\n",
              "      <td>27</td>\n",
              "      <td>None</td>\n",
              "      <td>own</td>\n",
              "      <td>1</td>\n",
              "      <td>official</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1000 rows × 22 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-702e76ae-018c-4ddb-ace2-58d9b113c626')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-702e76ae-018c-4ddb-ace2-58d9b113c626 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-702e76ae-018c-4ddb-ace2-58d9b113c626');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 176
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "may_med = bd.query('median==1')\n",
        "men_med = bd.query('median==0')"
      ],
      "metadata": {
        "id": "AfKEnP7_Tm2N"
      },
      "id": "AfKEnP7_Tm2N",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "km_may = KaplanMeierFitter().fit(may_med['duration'], may_med['full_repaid'])\n",
        "km_men = KaplanMeierFitter().fit(men_med['duration'], men_med['full_repaid'])"
      ],
      "metadata": {
        "id": "Lbb9It-lUMZw"
      },
      "id": "Lbb9It-lUMZw",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "km_may.plot_survival_function(label='Prestamo mayor')\n",
        "km_men.plot_survival_function(label = 'Prestamo menor');"
      ],
      "metadata": {
        "id": "q8YGXQK3V3rm",
        "outputId": "775f4ea6-53cb-4873-fe5f-f83d3bf7d005",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        }
      },
      "id": "q8YGXQK3V3rm",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Se puede observar que entre mayor es la cantidad prestada, mayor es el tiempo que se tarda en liquidar, aquellos se pidieron una menor cantidad se tardaron un maximo de entre 40 y 50 meses mientras aquellos que piederon cantidades mas grandes se tardaron hasta mas de 70 meses. "
      ],
      "metadata": {
        "id": "w768dnXkaFdS"
      },
      "id": "w768dnXkaFdS"
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ho: S1(t) = S2(t) Funciones de supervivencia son iguales\n",
        "\n",
        "Ha: S1(t) /= S2(t) Funciones de supervivencia distintos"
      ],
      "metadata": {
        "id": "IDDoAJ7aWQJU"
      },
      "id": "IDDoAJ7aWQJU"
    },
    {
      "cell_type": "code",
      "source": [
        "from lifelines.statistics import logrank_test"
      ],
      "metadata": {
        "id": "rLmj6mkxWJc_"
      },
      "id": "rLmj6mkxWJc_",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lrt_1 = logrank_test(may_med['duration'], may_med['full_repaid'],\n",
        "                    men_med['duration'], men_med['full_repaid'])"
      ],
      "metadata": {
        "id": "rUq5LG37WLnq"
      },
      "id": "rUq5LG37WLnq",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "si p-value < $\\alpha$ rechazamos Ho"
      ],
      "metadata": {
        "id": "tWnkLbwsXLK1"
      },
      "id": "tWnkLbwsXLK1"
    },
    {
      "cell_type": "code",
      "source": [
        "lrt_1.print_summary()"
      ],
      "metadata": {
        "id": "DLyk-KbHXVnf",
        "outputId": "fa65b4d1-6ecf-49da-8b37-2a7a773d5815",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        }
      },
      "id": "DLyk-KbHXVnf",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<lifelines.StatisticalResult: logrank_test>\n",
              "               t_0 = -1\n",
              " null_distribution = chi squared\n",
              "degrees_of_freedom = 1\n",
              "         test_name = logrank_test\n",
              "\n",
              "---\n",
              " test_statistic      p  -log2(p)\n",
              "         609.84 <0.005    444.86"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>t_0</th>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>null_distribution</th>\n",
              "      <td>chi squared</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>degrees_of_freedom</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>test_name</th>\n",
              "      <td>logrank_test</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>test_statistic</th>\n",
              "      <th>p</th>\n",
              "      <th>-log2(p)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>609.84</td>\n",
              "      <td>&lt;0.005</td>\n",
              "      <td>444.86</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>"
            ],
            "text/latex": "\\begin{tabular}{lrrr}\n & test_statistic & p & -log2(p) \\\\\n0 & 609.84 & 0.00 & 444.86 \\\\\n\\end{tabular}\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "con un $\\alpha=0.05$ Rechazamos Ho, significa que las funciones de supervivencia son distintas"
      ],
      "metadata": {
        "id": "63d2hwUuXe6C"
      },
      "id": "63d2hwUuXe6C"
    },
    {
      "cell_type": "code",
      "source": [
        "km_men.median_survival_time_"
      ],
      "metadata": {
        "id": "L6g43qASYpQB",
        "outputId": "32dc1586-4efe-4686-a2ad-d18eee1b37c7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "id": "L6g43qASYpQB",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "15.0"
            ]
          },
          "metadata": {},
          "execution_count": 192
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "El 50% de los que piden prestamos por debajo de la mediana lo liquidan antes de los 15 meses."
      ],
      "metadata": {
        "id": "k1wqdoiwZCfS"
      },
      "id": "k1wqdoiwZCfS"
    },
    {
      "cell_type": "code",
      "source": [
        "km_may.median_survival_time_"
      ],
      "metadata": {
        "id": "MVDfkCDvYsz3",
        "outputId": "4d8e1eb0-3a09-4de2-ae32-63b4b46915e8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "id": "MVDfkCDvYsz3",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "30.0"
            ]
          },
          "metadata": {},
          "execution_count": 193
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "El 50% de los que piden prestamos por encima de la mediana lo liquidan antes de los 30 meses."
      ],
      "metadata": {
        "id": "55TAONafZXwG"
      },
      "id": "55TAONafZXwG"
    },
    {
      "cell_type": "markdown",
      "source": [
        "El banco tenia razon ya que entre mayor es el prestamo mayor es el tiempo que se tarda en ser liquidado"
      ],
      "metadata": {
        "id": "NpERLESNZo6p"
      },
      "id": "NpERLESNZo6p"
    },
    {
      "cell_type": "markdown",
      "id": "4a57a11b",
      "metadata": {
        "id": "4a57a11b"
      },
      "source": [
        "6. Elige seis variables para ajustar un modelo de cox de riesgos porporcionales. Antes de correr el modelo explica en qué sentido y por qué afectan el riesgo de pagar el préstamo cada una de las variables elegidas\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**telephone**: Si se tiene telefono es mas facil de contactar por lo tanto es mas probable que se termine de pagar la deuda.\n",
        "\n",
        "**age**: Puede influir en el sentido de las prioridad y los ingresos para pagar la deuda.\n",
        "\n",
        "**present_residence**: Conservar una residencia podria indicar una estabilidad financiera.\n",
        "\n",
        "**people_liable**: Entre mas personas dependan es menos probable terminar de pagar la deuda.\n",
        "\n",
        "**amount**: Si la cantidad prestada es baja es mas probable que se liquide.\n",
        "\n",
        "**number_of_credits**: Entre mayor numero de creditos haya tenido es mas probable que liquide el actual."
      ],
      "metadata": {
        "id": "64M1bx3Q4407"
      },
      "id": "64M1bx3Q4407"
    },
    {
      "cell_type": "code",
      "source": [
        "bd_red = bd.drop(['foreign_worker','employment_years','personal_status','housing','job','installment_rate','purpose','checking_account_status','credit_history','other_installment_plans','savings_account_status','property','other_debtors'], axis=1)"
      ],
      "metadata": {
        "id": "TOb9whIW1rim"
      },
      "id": "TOb9whIW1rim",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "bd_red"
      ],
      "metadata": {
        "id": "Hu7OBowqDQvP",
        "outputId": "d0e9d3b2-3a0d-4f6f-91c8-5e90ad7a906c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        }
      },
      "id": "Hu7OBowqDQvP",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     duration  amount  present_residence  age  number_of_credits  \\\n",
              "0           6    1169                  4   67                  2   \n",
              "1          48    5951                  2   22                  1   \n",
              "2          12    2096                  3   49                  1   \n",
              "3          42    7882                  4   45                  1   \n",
              "4          24    4870                  4   53                  2   \n",
              "..        ...     ...                ...  ...                ...   \n",
              "995        12    1736                  4   31                  1   \n",
              "996        30    3857                  4   40                  1   \n",
              "997        12     804                  4   38                  1   \n",
              "998        45    1845                  4   23                  1   \n",
              "999        45    4576                  4   27                  1   \n",
              "\n",
              "     people_liable  telephone  full_repaid  \n",
              "0                1          1            1  \n",
              "1                1          0            0  \n",
              "2                2          0            1  \n",
              "3                2          0            1  \n",
              "4                2          0            0  \n",
              "..             ...        ...          ...  \n",
              "995              1          0            1  \n",
              "996              1          1            1  \n",
              "997              1          0            1  \n",
              "998              1          1            0  \n",
              "999              1          0            1  \n",
              "\n",
              "[1000 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9e45055b-7691-406e-8015-34f1031f33e5\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>duration</th>\n",
              "      <th>amount</th>\n",
              "      <th>present_residence</th>\n",
              "      <th>age</th>\n",
              "      <th>number_of_credits</th>\n",
              "      <th>people_liable</th>\n",
              "      <th>telephone</th>\n",
              "      <th>full_repaid</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6</td>\n",
              "      <td>1169</td>\n",
              "      <td>4</td>\n",
              "      <td>67</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>48</td>\n",
              "      <td>5951</td>\n",
              "      <td>2</td>\n",
              "      <td>22</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>12</td>\n",
              "      <td>2096</td>\n",
              "      <td>3</td>\n",
              "      <td>49</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>42</td>\n",
              "      <td>7882</td>\n",
              "      <td>4</td>\n",
              "      <td>45</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>24</td>\n",
              "      <td>4870</td>\n",
              "      <td>4</td>\n",
              "      <td>53</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>12</td>\n",
              "      <td>1736</td>\n",
              "      <td>4</td>\n",
              "      <td>31</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>30</td>\n",
              "      <td>3857</td>\n",
              "      <td>4</td>\n",
              "      <td>40</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>997</th>\n",
              "      <td>12</td>\n",
              "      <td>804</td>\n",
              "      <td>4</td>\n",
              "      <td>38</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>998</th>\n",
              "      <td>45</td>\n",
              "      <td>1845</td>\n",
              "      <td>4</td>\n",
              "      <td>23</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>45</td>\n",
              "      <td>4576</td>\n",
              "      <td>4</td>\n",
              "      <td>27</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1000 rows × 8 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9e45055b-7691-406e-8015-34f1031f33e5')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9e45055b-7691-406e-8015-34f1031f33e5 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9e45055b-7691-406e-8015-34f1031f33e5');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from lifelines import CoxPHFitter"
      ],
      "metadata": {
        "id": "8txFTVv1EIM3"
      },
      "id": "8txFTVv1EIM3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cox = CoxPHFitter().fit(bd_red, 'duration', 'full_repaid')\n",
        "cox.print_summary()"
      ],
      "metadata": {
        "id": "xFnu1mviDzZD",
        "outputId": "2bf0aa56-714e-4be4-88fa-2e0dd2abdf8a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 631
        }
      },
      "id": "xFnu1mviDzZD",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<lifelines.CoxPHFitter: fitted with 1000 total observations, 300 right-censored observations>\n",
              "             duration col = 'duration'\n",
              "                event col = 'full_repaid'\n",
              "      baseline estimation = breslow\n",
              "   number of observations = 1000\n",
              "number of events observed = 700\n",
              "   partial log-likelihood = -4116.21\n",
              "         time fit was run = 2023-04-04 07:45:44 UTC\n",
              "\n",
              "---\n",
              "                    coef  exp(coef)   se(coef)   coef lower 95%   coef upper 95%  exp(coef) lower 95%  exp(coef) upper 95%\n",
              "covariate                                                                                                                 \n",
              "amount             -0.00       1.00       0.00            -0.00            -0.00                 1.00                 1.00\n",
              "present_residence  -0.08       0.93       0.04            -0.15            -0.01                 0.86                 0.99\n",
              "age                 0.01       1.01       0.00             0.00             0.02                 1.00                 1.02\n",
              "number_of_credits   0.12       1.13       0.07            -0.01             0.25                 0.99                 1.29\n",
              "people_liable       0.02       1.02       0.11            -0.19             0.23                 0.83                 1.25\n",
              "telephone           0.06       1.06       0.08            -0.09             0.22                 0.91                 1.24\n",
              "\n",
              "                    cmp to      z      p   -log2(p)\n",
              "covariate                                          \n",
              "amount                0.00 -14.13 <0.005     148.11\n",
              "present_residence     0.00  -2.18   0.03       5.08\n",
              "age                   0.00   2.87 <0.005       7.91\n",
              "number_of_credits     0.00   1.78   0.07       3.75\n",
              "people_liable         0.00   0.19   0.85       0.23\n",
              "telephone             0.00   0.77   0.44       1.18\n",
              "---\n",
              "Concordance = 0.73\n",
              "Partial AIC = 8244.43\n",
              "log-likelihood ratio test = 306.34 on 6 df\n",
              "-log2(p) of ll-ratio test = 207.44"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>model</th>\n",
              "      <td>lifelines.CoxPHFitter</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>duration col</th>\n",
              "      <td>'duration'</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>event col</th>\n",
              "      <td>'full_repaid'</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>baseline estimation</th>\n",
              "      <td>breslow</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>number of observations</th>\n",
              "      <td>1000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>number of events observed</th>\n",
              "      <td>700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>partial log-likelihood</th>\n",
              "      <td>-4116.21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>time fit was run</th>\n",
              "      <td>2023-04-04 07:45:44 UTC</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th style=\"min-width: 12px;\"></th>\n",
              "      <th style=\"min-width: 12px;\">coef</th>\n",
              "      <th style=\"min-width: 12px;\">exp(coef)</th>\n",
              "      <th style=\"min-width: 12px;\">se(coef)</th>\n",
              "      <th style=\"min-width: 12px;\">coef lower 95%</th>\n",
              "      <th style=\"min-width: 12px;\">coef upper 95%</th>\n",
              "      <th style=\"min-width: 12px;\">exp(coef) lower 95%</th>\n",
              "      <th style=\"min-width: 12px;\">exp(coef) upper 95%</th>\n",
              "      <th style=\"min-width: 12px;\">cmp to</th>\n",
              "      <th style=\"min-width: 12px;\">z</th>\n",
              "      <th style=\"min-width: 12px;\">p</th>\n",
              "      <th style=\"min-width: 12px;\">-log2(p)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>amount</th>\n",
              "      <td>-0.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-0.00</td>\n",
              "      <td>-0.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-14.13</td>\n",
              "      <td>&lt;0.005</td>\n",
              "      <td>148.11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>present_residence</th>\n",
              "      <td>-0.08</td>\n",
              "      <td>0.93</td>\n",
              "      <td>0.04</td>\n",
              "      <td>-0.15</td>\n",
              "      <td>-0.01</td>\n",
              "      <td>0.86</td>\n",
              "      <td>0.99</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-2.18</td>\n",
              "      <td>0.03</td>\n",
              "      <td>5.08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <td>0.01</td>\n",
              "      <td>1.01</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.02</td>\n",
              "      <td>1.00</td>\n",
              "      <td>1.02</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2.87</td>\n",
              "      <td>&lt;0.005</td>\n",
              "      <td>7.91</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>number_of_credits</th>\n",
              "      <td>0.12</td>\n",
              "      <td>1.13</td>\n",
              "      <td>0.07</td>\n",
              "      <td>-0.01</td>\n",
              "      <td>0.25</td>\n",
              "      <td>0.99</td>\n",
              "      <td>1.29</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.78</td>\n",
              "      <td>0.07</td>\n",
              "      <td>3.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>people_liable</th>\n",
              "      <td>0.02</td>\n",
              "      <td>1.02</td>\n",
              "      <td>0.11</td>\n",
              "      <td>-0.19</td>\n",
              "      <td>0.23</td>\n",
              "      <td>0.83</td>\n",
              "      <td>1.25</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.19</td>\n",
              "      <td>0.85</td>\n",
              "      <td>0.23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>telephone</th>\n",
              "      <td>0.06</td>\n",
              "      <td>1.06</td>\n",
              "      <td>0.08</td>\n",
              "      <td>-0.09</td>\n",
              "      <td>0.22</td>\n",
              "      <td>0.91</td>\n",
              "      <td>1.24</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.77</td>\n",
              "      <td>0.44</td>\n",
              "      <td>1.18</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table><br><div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Concordance</th>\n",
              "      <td>0.73</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Partial AIC</th>\n",
              "      <td>8244.43</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>log-likelihood ratio test</th>\n",
              "      <td>306.34 on 6 df</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>-log2(p) of ll-ratio test</th>\n",
              "      <td>207.44</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/latex": "\\begin{tabular}{lrrrrrrrrrrr}\n & coef & exp(coef) & se(coef) & coef lower 95% & coef upper 95% & exp(coef) lower 95% & exp(coef) upper 95% & cmp to & z & p & -log2(p) \\\\\ncovariate &  &  &  &  &  &  &  &  &  &  &  \\\\\namount & -0.00 & 1.00 & 0.00 & -0.00 & -0.00 & 1.00 & 1.00 & 0.00 & -14.13 & 0.00 & 148.11 \\\\\npresent_residence & -0.08 & 0.93 & 0.04 & -0.15 & -0.01 & 0.86 & 0.99 & 0.00 & -2.18 & 0.03 & 5.08 \\\\\nage & 0.01 & 1.01 & 0.00 & 0.00 & 0.02 & 1.00 & 1.02 & 0.00 & 2.87 & 0.00 & 7.91 \\\\\nnumber_of_credits & 0.12 & 1.13 & 0.07 & -0.01 & 0.25 & 0.99 & 1.29 & 0.00 & 1.78 & 0.07 & 3.75 \\\\\npeople_liable & 0.02 & 1.02 & 0.11 & -0.19 & 0.23 & 0.83 & 1.25 & 0.00 & 0.19 & 0.85 & 0.23 \\\\\ntelephone & 0.06 & 1.06 & 0.08 & -0.09 & 0.22 & 0.91 & 1.24 & 0.00 & 0.77 & 0.44 & 1.18 \\\\\n\\end{tabular}\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "f15cba0d",
      "metadata": {
        "id": "f15cba0d"
      },
      "source": [
        "7. Interpreta la regresión de Cox"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "GJWVnsSBO81t"
      },
      "id": "GJWVnsSBO81t",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Los años que se tienen viviendo en la residencia actual disminuye la probabilidad de pagar la deuda; 1 - 0.93 = 0.07 = 7%. En promedio por cada año que ha permanecido en su residencia se disminuye la probabilidad de pagar la deuda en un 7%.\n",
        "\n",
        "La edad aumenta la probabilidad de pagar la deuda; 1.01 - 1 = 0.01 = 1%. Por cada año cumplido en promedio la probabilidad de pagar la deuda aumenta en un 1%.\n",
        "\n",
        "El numero de creditos aumenta la probabilidad de pagar la deuda; 1.13 - 1 = 0.13 = 13%. Por cada credito en promedio aumenta la probabilidad de pagar la deuda en un 13%.\n",
        "\n",
        "El numero de personas a su cargo aumenta la probabilidad de pagar la deuda; 1.02 - 1 = 0.02 = 2%. Por cada persona a su cargo en promedio aumenta la probabilidad de pagara la deuda en un 2%.\n",
        "\n",
        "El contar con un numero telefonico aumenta la probabilidad de pagar la deuda; 1.06 - 1 = 0.06 = 6%. El tener un nuemero telefonico en promedio aumenta la probabilidad de pagar la deuda en un 6%."
      ],
      "metadata": {
        "id": "2z9MdYJMIKRQ"
      },
      "id": "2z9MdYJMIKRQ"
    },
    {
      "cell_type": "markdown",
      "id": "f141d21c",
      "metadata": {
        "id": "f141d21c"
      },
      "source": [
        "8. Con base en el análisis hecho hasta ahora qué recomendación podría hacer al banco para mejorar sus políticas de préstamo"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "No otorgar prestamos a ninguna persona que no cuente con numero telefonico.\n",
        "\n",
        "Si una persona ya a adquirido un prestamos y lo ha liquidado darle facilidades para adquirir otro, ya que esto aumenta la probabilidad de pago.\n",
        "\n",
        "Otorgar facilidades para aprobar prestamos a personas con gente a su cargo, ya que les interesara quedar bien para conservar la posibilidad de otro prestamo abierta.\n",
        "\n",
        "Ajustar los topes de prestamos de acuerdo a los criterios previamente mencionados."
      ],
      "metadata": {
        "id": "ZM2E72Z4Pgas"
      },
      "id": "ZM2E72Z4Pgas"
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Kd216BBoPg2X"
      },
      "id": "Kd216BBoPg2X",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.7"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}